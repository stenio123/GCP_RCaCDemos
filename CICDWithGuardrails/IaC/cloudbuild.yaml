steps:
- id: 'tf init'
  name: 'hashicorp/terraform:1.3.5'
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
      echo "*************** TERRAFORM INIT ******************"
      echo "*************************************************"
      echo "current dir: `pwd`"
      echo "contents dir: `ls`"
      cd CICDWithGuardrails/IaC
      terraform init 
      cd ../..
# [START tf-plan]
- id: 'tf plan'
  name: 'hashicorp/terraform:1.3.5'
  entrypoint: 'sh'
  args: 
  - '-c'
  - | 
      echo "*************** TERRAFOM PLAN ******************"
      echo "*************************************************"
      echo "current dir: `pwd`"
      echo "contents dir: `ls`"
      cd CICDWithGuardrails/IaC
      terraform plan --out tfplan.binary
      terraform show -json tfplan.binary > tfplan.json
      cd ../..
# [END tf-plan]
# [START guardrails]
- id: 'download'
  name: 'gcr.io/cloud-builders/curl'
  args: ['https://openpolicyagent.org/downloads/v0.47.0/opa_linux_amd64_static','-s','--max-time','10']
- id: 'guardrails'
  name: bash
  script: |
    #!/usr/bin/env bash
    echo "Hello World"
    echo "*************** GUARDRAILS - OPA ******************"
    echo "*************************************************"
    echo "current dir: `pwd`"
    echo "contents dir: `ls`"
    cd CICDWithGuardrails/IaC
    chmod 755 ./opa
    ./opa eval 'data.terraform.deny[x]' --data policies/ --input tfplan.json --format raw
    cd ../..
# [END guardrails]

# [START tf-apply]
- id: 'tf apply'
  name: 'hashicorp/terraform:1.3.5'
  entrypoint: 'sh'
  args: 
  - '-c'
  - | 
      echo "*************** TERRAFOM APPLY ******************"
      echo "*************************************************"
      echo "current dir: `pwd`"
      echo "contents dir: `ls`"
      terraform apply -auto-approve
      cd ../..
# [END tf-apply] 